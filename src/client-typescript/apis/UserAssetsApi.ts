/* tslint:disable */
/* eslint-disable */
/**
 * ZPI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: all
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PatchUserAssetsDto,
  ProblemDetails,
  UserAssetDto,
} from '../models';
import {
    PatchUserAssetsDtoFromJSON,
    PatchUserAssetsDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UserAssetDtoFromJSON,
    UserAssetDtoToJSON,
} from '../models';

export interface DeleteUserAssetRequest {
    assetName: string;
    description?: string;
}

export interface PatchUserAssetsRequest {
    patchUserAssetsDto?: Array<PatchUserAssetsDto>;
}

/**
 * 
 */
export class UserAssetsApi extends runtime.BaseAPI {

    /**
     */
    async deleteUserAssetRaw(requestParameters: DeleteUserAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserAssetDto>>> {
        if (requestParameters.assetName === null || requestParameters.assetName === undefined) {
            throw new runtime.RequiredError('assetName','Required parameter requestParameters.assetName was null or undefined when calling deleteUserAsset.');
        }

        const queryParameters: any = {};

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users/me/assets/{assetName}`.replace(`{${"assetName"}}`, encodeURIComponent(String(requestParameters.assetName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserAssetDtoFromJSON));
    }

    /**
     */
    async deleteUserAsset(requestParameters: DeleteUserAssetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserAssetDto>> {
        const response = await this.deleteUserAssetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllUserAssetsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserAssetDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users/me/assets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserAssetDtoFromJSON));
    }

    /**
     */
    async getAllUserAssets(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserAssetDto>> {
        const response = await this.getAllUserAssetsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async patchUserAssetsRaw(requestParameters: PatchUserAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserAssetDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users/me/assets`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.patchUserAssetsDto.map(PatchUserAssetsDtoToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserAssetDtoFromJSON));
    }

    /**
     */
    async patchUserAssets(requestParameters: PatchUserAssetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserAssetDto>> {
        const response = await this.patchUserAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
