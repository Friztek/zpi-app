/* tslint:disable */
/* eslint-disable */
/**
 * ZPI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: all
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddUserDto,
  PatchUser,
  ProblemDetails,
  UserPreferencesDto,
} from '../models';
import {
    AddUserDtoFromJSON,
    AddUserDtoToJSON,
    PatchUserFromJSON,
    PatchUserToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UserPreferencesDtoFromJSON,
    UserPreferencesDtoToJSON,
} from '../models';

export interface AddUserRequest {
    addUserDto?: AddUserDto;
}

export interface PatchUserInfoRequest {
    patchUser?: PatchUser;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async addUserRaw(requestParameters: AddUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUserDtoToJSON(requestParameters.addUserDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addUser(requestParameters: AddUserRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async patchUserInfoRaw(requestParameters: PatchUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPreferencesDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users/me`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchUserToJSON(requestParameters.patchUser),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPreferencesDtoFromJSON(jsonValue));
    }

    /**
     */
    async patchUserInfo(requestParameters: PatchUserInfoRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPreferencesDto> {
        const response = await this.patchUserInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async resetUserPasswordRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users/me/password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async resetUserPassword(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetUserPasswordRaw(initOverrides);
    }

}
