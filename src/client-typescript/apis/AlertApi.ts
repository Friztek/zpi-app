/* tslint:disable */
/* eslint-disable */
/**
 * ZPI API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: all
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddAlertDto,
  AlertDto,
  ProblemDetails,
} from '../models';
import {
    AddAlertDtoFromJSON,
    AddAlertDtoToJSON,
    AlertDtoFromJSON,
    AlertDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface AddNewAllertRequest {
    addAlertDto?: AddAlertDto;
}

export interface DeleteAlertRequest {
    id: number;
}

/**
 * 
 */
export class AlertApi extends runtime.BaseAPI {

    /**
     */
    async addNewAllertRaw(requestParameters: AddNewAllertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/alerts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddAlertDtoToJSON(requestParameters.addAlertDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertDtoFromJSON(jsonValue));
    }

    /**
     */
    async addNewAllert(requestParameters: AddNewAllertRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertDto> {
        const response = await this.addNewAllertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteAlertRaw(requestParameters: DeleteAlertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAlert.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/alerts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async deleteAlert(requestParameters: DeleteAlertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.deleteAlertRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllAllertsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlertDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/alerts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlertDtoFromJSON));
    }

    /**
     */
    async getAllAllerts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlertDto>> {
        const response = await this.getAllAllertsRaw(initOverrides);
        return await response.value();
    }

}
